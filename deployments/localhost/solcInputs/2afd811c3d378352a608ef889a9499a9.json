{
  "language": "Solidity",
  "sources": {
    "contracts/Storage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\nimport \"./StorageSlot.sol\";\n\ncontract Storage {\n    // advance_______________________________________________________\n    // EIP1967 check it\n    constructor() {\n        // 32 bytes - 256 bits\n        // keccak256(\"darklight\") -> 256\n        StorageSlot.getUint256Slot(keccak256(\"darklight\")).value = 255;\n    }\n    // basic_________________________________________________________\n    // uint256 x = 97; // 0x0\n    // uint256 y = 56; // 0x1\n    // mapping(uint => uint) testing; // 0x2\n    // constructor() {\n    //     // keccack256(1 + 0x2)\n    //     testing[1] = 77;\n    //     // keccack256(4 + 0x2)\n    //     testing[4] = 44;\n    // }\n}\n"
    },
    "contracts/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(\n        bytes32 slot\n    ) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(\n        bytes32 slot\n    ) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(\n        bytes32 slot\n    ) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(\n        bytes32 slot\n    ) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}